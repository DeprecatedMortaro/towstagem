#!/usr/bin/env ruby
require 'net/http'
action = ARGV.first
if action == 'new'
  project = ARGV[1]
  Dir.mkdir project
  configru = "require './app'\n"
  configru += "run Sinatra::Application"
  File.open("#{project}/config.ru", 'w') {|f| f.write(configru) }
  gemfile = "source :rubygems \n"
  gemfile += "gem 'towsta'"
  File.open("#{project}/Gemfile", 'w') {|f| f.write(gemfile) }
  apprb = "#coding: utf-8 \n"
  apprb += "require 'sinatra'\n"
  apprb += "require 'towsta'\n\n"
  apprb += "get '/' do\n"
  apprb += "  sync_with_towsta\n"
  apprb += "  haml :index\n"
  apprb += "end\n"
  File.open("#{project}/app.rb", 'w') {|f| f.write(apprb) }
  towstarb = "Towsta.secret = '#{ARGV[2]}'\n"
  towstarb += "#Towsta.author = 'default_author_email'\n"
  towstarb += "#Towsta.global = {}"
  File.open("#{project}/towsta.rb", 'w') {|f| f.write(towstarb) }
  Dir.mkdir "#{project}/views"
  layout = "!!!\n"
  layout += "%html\n"
  layout += "  %head\n"
  layout += "    = partial :head\n"
  layout += "  %body\n"
  layout += "    #top\n"
  layout += "      .wrapper\n"
  layout += "    #middle\n"
  layout += "      .wrapper\n"
  layout += "        = yield\n"
  layout += "    #bottom\n"
  layout += "      .wrapper\n"
  File.open("#{project}/views/layout.haml", 'w') {|f| f.write(layout)}
  index = '%h1 Hello Towsta'
  File.open("#{project}/views/index.haml", 'w') {|f| f.write(index)}
  Dir.mkdir "#{project}/models"
  Dir.mkdir "#{project}/controllers"
  Dir.mkdir "#{project}/public"
  Dir.mkdir "#{project}/views/stylesheets"
  Dir.mkdir "#{project}/views/javascripts"
  css = "@import compass/reset\n"
  css += "@import compass/css3\n\n"
  css += "$wrapper: 940px\n\n"
  css += ".wrapper\n"
  css += "  :width $wrapper\n"
  css += "  :margin 0 auto\n"
  css += "#top, #middle, #bottom\n"
  css += "  :float left\n"
  css += "  :width 100%"
  File.open("#{project}/views/stylesheets/app.sass", 'w') {|f| f.write(css)}
  js = '$ ->'
  File.open("#{project}/views/javascripts/app.coffee", 'w') {|f| f.write(js)}
  Dir.mkdir "#{project}/views/partials"
  head = "%title #{project}\n"
  head += "%meta{:'http-equiv' => 'Content-Type', :content => 'text/html', :charset => 'utf-8'}\n"
  head += "%link{rel: 'stylesheet', type: 'text/css', href: '/stylesheets/app.css'}\n"
  head += "%link{rel: 'shortcut icon', type: 'image/x-icon', href: '/images/favicon.png'}\n"
  head += "%script{src: '/js/jquery.js'}\n"
  head += "%script{src: '/js/app.js'}"
  File.open("#{project}/views/partials/_head.haml", 'w') {|f| f.write(head)}
  Dir.mkdir "#{project}/public/js"
  Net::HTTP.start("code.jquery.com"){|http| @jquery = http.get('/jquery.min.js').body}
  File.open("#{project}/public/js/jquery.js", 'w') {|f| f.write(@jquery)}
  Dir.mkdir "#{project}/public/images"
  Dir.mkdir "#{project}/locales"
  git = '*.swp'
  File.open("#{project}/.gitignore", 'w') {|f| f.write(git)}
  puts "#{project} is ready to towst!"
elsif action == 'server'
  port = ARGV[1].nil? ? '6937' : ARGV[1]
  system "shotgun -I config.ru -p #{port}"
elsif action == 'console'
  system 'irb -r ./app.rb'
elsif action == 'configure'
  project = %x[pwd].split('/').last.strip
  system "git init"
  system "heroku create" unless system "heroku create #{project}"
  system "heroku addons:add sendgrid:starter"
  system "heroku addons:add memcache"
  system "heroku addons:add custom_domains:basic"
  system "heroku addons:add zerigo_dns:basic"
  system "bundle install"
elsif action == 'deploy'
  system 'towsta configure' unless system('heroku stack')
  system 'git add .'
  message = ARGV[1].nil? ? 'Deployed via Towsta gem' : ARGV[1]
  system "git commit -a -m '#{message}'"
  system 'git push -q' unless system 'git push heroku master -q'
  puts 'Deploy is complete!'
elsif action == 'help'
  puts 'towsta new {projectname} {optional: secret}           to generate a new project'
  puts 'towsta server {optional: port}                        to run the application server'
  puts 'towsta console                                        to run the application console'
  puts 'towsta deploy {optional: message}                     to deploy your application'
else
  puts 'Comand not found, try running "towsta help"'
end
